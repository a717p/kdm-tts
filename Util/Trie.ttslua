local Util = require("Kdm/Util/Util")

local Trie = {}

---------------------------------------------------------------------------------------------------
-- trie multimap: maps prefixes to one or more values
-- all searches are case-insensitive

local TrieClass = {}
TrieClass.__index = TrieClass

local function Trie_Create()
   local trie = {
      children = {},
      byte = nil,
      values = {},
   }
   setmetatable(trie, TrieClass)
   return trie
end

---------------------------------------------------------------------------------------------------

-- associates word to value, so that a subsequent Trie.Get by word (or a prefix) will include this value
function TrieClass.Set(trie, word, value)
   word = string.lower(word)
   local node = trie
   for i = 1, #word do
      local b = word:byte(i)
      local foundChild = nil
      for _, child in ipairs(node.children) do
         if child.byte == b then
            foundChild = child
            break
         end
      end

      if foundChild == nil then
         foundChild = {
            children = {},
            byte = b,
            values = {},
         }
         table.insert(node.children, foundChild)
      end

      node = foundChild
   end

   table.insert(node.values, value)
end

---------------------------------------------------------------------------------------------------

-- returns all values for all words starting with the word arg
function TrieClass.Get(trie, word)
   word = string.lower(word)
   local node = trie
   for i = 1, #word do
      local b = word:byte(i)
      local foundChild = nil
      for _, child in pairs(node.children) do
         if child.byte == b then
            foundChild = child
            break
         end
      end

      if foundChild == nil then
         return {}
      end

      node = foundChild
   end

   -- BFS down the rest of the tree and aggregate all results
   local results = {}
   local queue = {}
   table.insert(queue, node)
   while #queue > 0 do
      node = queue[#queue]
      table.remove(queue)

      for _, v in ipairs(node.values) do
         table.insert(results, v)
      end

      for _, child in pairs(node.children) do
         table.insert(queue, child)
      end
   end

   return results
end

---------------------------------------------------------------------------------------------------

return Trie_Create
