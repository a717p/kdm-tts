require("Kdm/Check")
local Util = require("Kdm/Util")
local Log = require("Kdm/Log").ForPackage("PlayerBoard")
local Zone = require("Kdm/Zone")
local EventManager = require("Kdm/EventManager")
local Ui = require("Kdm/Ui3d")
local Location = require("Kdm/Location")
local NamedObject = require("Kdm/NamedObject")
local Survivor = require("Kdm/Survivor")
local Container = require("Kdm/Container")

local Armor = nil
local Weapon = nil
local Population = nil

---------------------------------------------------------------------------------------------------

local PlayerBoard = {}

PlayerBoard.playerBoardsByObject = {}
PlayerBoard.playerBoards = {}
PlayerBoard.gearByLocation = {}

PlayerBoard.ARMOR_LOCATIONS = { "head", "arms", "body", "waist", "legs" }
PlayerBoard.HEAVY_INJURY_LOCATIONS = { "head", "arms", "body", "waist", "legs" }
PlayerBoard.LIGHT_INJURY_LOCATIONS = { "arms", "body", "waist", "legs" }

PlayerBoard.AFFINITIES = {
    Red = {204/255, 28/255, 35/255, 1},
    Green = {77/255, 189/255, 56/255, 1},
    Blue = {63/255, 153/255, 209/255, 1},
}

PlayerBoard.TOKEN_STATS = {
    ["Movement Token"] = "movement",
    ["Speed Token"] = "speed",
    ["Accuracy Token"] = "accuracy",
    ["Strength Token"] = "strength",
    ["Evasion Token"] = "evasion",
    ["Luck Token"] = "luck",
}

---------------------------------------------------------------------------------------------------

local PlayerBoardClass = {}
PlayerBoardClass.__index = PlayerBoardClass

function PlayerBoard.Create(playerNumber, object, saveState)
    Log.Debugf("Creating PlayerBoard for object %s (%s)", object.getName(), object.getGUID())
    saveState = saveState or {}

    local playerBoard = {
        tag = "PlayerBoard",

        playerNumber = playerNumber,

        object = object,

        linkedGearObjectsByLocation = {},

        linkedArmor = {},
        linkedWeapons = {},
        linkedGearTokenLocations = {},
        linkedTemporaryTokens = {},
        linkedPermanentTokens = {},
        linkedMiscTokens = {},
    }
    setmetatable(playerBoard, PlayerBoardClass)

    local function loadSurvivorSheet()
        local survivorSheetObject = getObjectFromGUID(saveState.linkedSurvivorSheetGuid)
        if survivorSheetObject == nil then  -- compare nil for TTS objects
            return Log.Errorf("Can't find survivor sheet %s that player board %d was linked to! Try recreating the it from the Population screen and dropping it back onto the player board.", saveState.linkedSurvivorSheetGuid, playerNumber)
        end
        playerBoard.linkedSurvivorSheet = Population.SurvivorSheetForObject(survivorSheetObject)
        if not playerBoard.linkedSurvivorSheet then
            return Log.Errorf("Survivor sheet %s on player board %d waswasn't linked to any survivor.", survivorSheetObject.getGUID(), playerNumber)
        end
        Log.Debugf("Linked Survivor Sheet %s / Survivor %d to PlayerBoard %d", survivorSheetObject.getGUID(), playerBoard:Survivor():Id(), playerBoard:Number())
    end
    if saveState.linkedSurvivorSheetGuid then
        loadSurvivorSheet()
    end

    local playerPrefix = "Player "..playerNumber
    local playerGearPrefix = playerPrefix.." Gear "
    for i = 1, 9 do
        playerBoard.linkedGearObjectsByLocation[Location.Get(playerGearPrefix..i)] = { weapon = nil, tokens = {} }
    end
    playerBoard.linkedGearObjectsByLocation[Location.Get(playerPrefix.." Fist & Tooth")] = { weapon = nil, tokens = {} }

    for _, hitLocation in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
        local temp = hitLocation.."TemporaryArmor"
        playerBoard[temp] = saveState[temp] or 0
        playerBoard[hitLocation.."GearArmor"] = 0
    end

    for _, hitLocation in ipairs(PlayerBoard.LIGHT_INJURY_LOCATIONS) do
        local inj = hitLocation.."LightInjury"
        playerBoard[inj] = saveState[inj]
    end

    for _, hitLocation in ipairs(PlayerBoard.HEAVY_INJURY_LOCATIONS) do
        local inj = hitLocation.."HeavyInjury"
        playerBoard[inj] = saveState[inj]
    end

    for color,_ in pairs(PlayerBoard.AFFINITIES) do
        local affinity = color.."Affinity"
        playerBoard[affinity] = saveState[affinity] or 0
    end

    if saveState.figurineGuid then
        figurine = getObjectFromGUID(saveState.figurineGuid)
        if not figurine then
            Log.Errorf("Player Board %d was linked to figurine %s, but that object no longer exists. Please re-link player %d with a figurine.", playerNumber, saveState.figurineGuid, playerNumber)
        else
            playerBoard:LinkFigurine(figurine)
        end
    end

    local checkBoxSize = 0.0548
    local y = -0.972599

    local topLeft = { x = 0.011453, y = y }
    local bottomRight = { x = topLeft.x - checkBoxSize, y = y + checkBoxSize }
    playerBoard.headHeavyInjuryCheckBox = Ui.CheckBox({ object = object, id = "HeadHeavyInjury", topLeft = topLeft, bottomRight = bottomRight, scale = 0.075, checked = playerBoard.headHeavyInjury, onClick = function()
        local value = not playerBoard.headHeavyInjury
        Log.Debugf("Setting PlayerBoard %d (%s) headHeavyInjury to %s", playerBoard.playerNumber, playerBoard.object.getGUID(), tostring(value))
        playerBoard.headHeavyInjury = value
        playerBoard.headHeavyInjuryCheckBox:Set(value)
    end })

    local hitLocations = { "arms", "body", "waist", "legs" }

    local x1 = -0.152743
    local xn = -0.736928
    local dx = (xn - x1) / 3
    for i, hitLocation in ipairs(hitLocations) do
        local topLeft = { x = x1 + (i - 1) * dx, y = y }
        local bottomRight = { x = topLeft.x - checkBoxSize, y = y + checkBoxSize }
        local field = hitLocation.."LightInjury"
        playerBoard[field.."CheckBox"] = Ui.CheckBox({ object = object, id = Util.Capitalize(field), topLeft = topLeft, bottomRight = bottomRight, scale = 0.075, checked = playerBoard[field], onClick = function()
            local value = not playerBoard[field]
            Log.Debugf("Setting PlayerBoard %d %s to %s", playerBoard.playerNumber, field, tostring(value))
            playerBoard[field] = value
            playerBoard[field.."CheckBox"]:Set(value)
        end })
    end

    local x1 = -0.214888
    local xn = -0.799133
    for i, hitLocation in ipairs(hitLocations) do
        local topLeft = { x = x1 + (i - 1) * dx, y = y }
        local bottomRight = { x = topLeft.x - checkBoxSize, y = y + checkBoxSize }
        local field = hitLocation.."HeavyInjury"
        playerBoard[field.."CheckBox"] = Ui.CheckBox({ object = object, id = Util.Capitalize(field), topLeft = topLeft, bottomRight = bottomRight, scale = 0.075, checked = playerBoard[field], onClick = function()
            local value = not playerBoard[field]
            Log.Debugf("Setting PlayerBoard %d %s to %s", playerBoard.playerNumber, field, tostring(value))
            playerBoard[field] = value
            playerBoard[field.."CheckBox"]:Set(value)
        end })
    end

    local x1 = 0.047596
    local x2 = -0.087452
    local width = x2 - x1
    local y1 = -0.912613
    local y2 = -0.780076
    local xn = -0.727698
    local dx = (xn - x1) / 4
    for i, hitLocation in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
        local topLeft = { x = x1 + (i - 1) * dx, y = y1 }
        local bottomRight = { x = topLeft.x + width, y = y2 }
        local value = playerBoard[hitLocation.."TemporaryArmor"] + playerBoard[hitLocation.."GearArmor"]
        playerBoard[hitLocation.."ArmorCounter"] = Ui.Counter({ object = object, id = Util.Capitalize(hitLocation.."Armor"), topLeft = topLeft, bottomRight = bottomRight, scale = 0.07, value = value, onValueChanged = function(delta)
            playerBoard:AddArmor(hitLocation, delta, 0)
        end })
    end

    local topLeft = { x = -0.004649, y = -0.687242 }
    local bottomRight = { x = -0.212906, y = -0.623098 }
    Ui.Button({ object = object, id = "HealAndReset", topLeft = topLeft, bottomRight = bottomRight, scale = 0.07, onClick = function()
        playerBoard:HealAndReset(playerBoard)
    end})

    topLeft.y = -0.610934
    bottomRight.y = -0.549081
    Ui.Button({ object = object, id = "PackSurvivor", topLeft = topLeft, bottomRight = bottomRight, scale = 0.07, onClick = function()
        playerBoard:PackSurvivorBox()
    end})

    -- add affinity counters
    topLeft.x = 0.07
    topLeft.y = -0.425
    bottomRight.x = 0
    bottomRight.y = -0.495
    for color, rgb in pairs(PlayerBoard.AFFINITIES) do
        local value = playerBoard[color.."Affinity"]
        playerBoard[color.."AffinityCounter"] = Ui.Counter({ object = object, id = "Affinity" .. color, topLeft = topLeft, bottomRight = bottomRight, scale = 0.07, value = value, counterStyle = 1, color = rgb, font_size = 500, font_color = { r = 0.271, g = 0.22, b = 0.141, a = 100 }, onValueChanged = function(delta)
            playerBoard:AddAffinity(color, delta)
        end})
        topLeft.y = topLeft.y + 0.08
        bottomRight.y = bottomRight.y + 0.08
    end

    return playerBoard
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.Save(playerBoard)
    local saveState = {}

    if playerBoard.linkedSurvivorSheet then
        saveState.linkedSurvivorSheetGuid = playerBoard.linkedSurvivorSheet.object.getGUID()
    end

    for _, hitLocation in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
        local field = hitLocation.."TemporaryArmor"
        saveState[field] = playerBoard[field]
    end

    for _, hitLocation in ipairs(PlayerBoard.LIGHT_INJURY_LOCATIONS) do
        local field = hitLocation.."LightInjury"
        saveState[field] = playerBoard[field]
    end

    for _, hitLocation in ipairs(PlayerBoard.HEAVY_INJURY_LOCATIONS) do
        local field = hitLocation.."HeavyInjury"
        saveState[field] = playerBoard[field]
    end

    for color,_ in pairs(PlayerBoard.AFFINITIES) do
        local field = color.."Affinity"
        saveState[field] = playerBoard[field]
    end

    if playerBoard.figurine then
        saveState.figurineGuid = playerBoard.figurine.getGUID()
    end

    return saveState
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.Number(playerBoard) return playerBoard.playerNumber end
function PlayerBoardClass.Object(playerBoard) return playerBoard.object end
function PlayerBoardClass.Figurine(playerBoard) return playerBoard.figurine end
function PlayerBoardClass.SurvivorSheet(playerBoard) return playerBoard.linkedSurvivorSheet end
function PlayerBoardClass.Survivor(playerBoard) return playerBoard.linkedSurvivorSheet and playerBoard.linkedSurvivorSheet:Survivor() or nil end
function PlayerBoardClass.Color(playerBoard) return NamedObject.Get("Player "..playerBoard.playerNumber.." Marker").getColorTint() end
function PlayerBoardClass.Armor(playerBoard) return playerBoard.linkedArmor end

function PlayerBoardClass.Weapons(playerBoard)
    local results = {}
    for object, data in pairs(playerBoard.linkedWeapons) do
        table.insert(results, {
            name = object.getName(),
            stats = data.stats,
            modifiers = playerBoard.linkedGearObjectsByLocation[data.location].tokens,
        })
    end
    return results
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.AddArmor(playerBoard, hitLocation, temporaryArmor, gearArmor)
    Log.Debugf("Adding %d temporary/%d gear armor to %s to %s", temporaryArmor, gearArmor, hitLocation, playerBoard.object.getName())

    local oldTemporaryArmor = playerBoard[hitLocation.."TemporaryArmor"]
    local oldGearArmor = playerBoard[hitLocation.."GearArmor"]
    local newTemporaryArmor = oldTemporaryArmor + temporaryArmor
    local newGearArmor = oldGearArmor + gearArmor
    playerBoard[hitLocation.."TemporaryArmor"] = newTemporaryArmor
    playerBoard[hitLocation.."GearArmor"] = newGearArmor
    if (oldTemporaryArmor + oldGearArmor) != (newTemporaryArmor + newGearArmor) then
        playerBoard[hitLocation.."ArmorCounter"]:Set(newTemporaryArmor + newGearArmor)
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.AddAffinity(playerBoard, color, value)
    Log.Debugf("Adding %d %s affinity to %s", value, color, playerBoard.object.getName())

    local newAffinity = Util.Clamp(playerBoard[color.."Affinity"] + value, 0, 10)
    playerBoard[color.."Affinity"] = newAffinity
    playerBoard[color.."AffinityCounter"]:Set(newAffinity)
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.LinkFigurine(playerBoard, figurine)
    Log.Debugf("Linking figurine %s (%s) with player %d", figurine.getName(), figurine.getGUID(), playerBoard.playerNumber)

    playerBoard:UnlinkFigurine()

    for i, pb in ipairs(PlayerBoard.playerBoards) do
        if pb.figurine == figurine then
            pb:UnlinkFigurine()
        end
    end

    playerBoard.figurine = figurine
    local marker = NamedObject.Get("Player "..playerBoard.playerNumber.." Marker")
    figurine.setColorTint(marker.getColorTint())
    playerBoard.figurine = figurine

    if playerBoard:SurvivorSheet() then
        figurine.setName(playerBoard:SurvivorSheet():Survivor():NameOrUnnamed())
    end

    Log.Printf("Linked figurine %s to player %s", figurine.getName(), playerBoard.playerNumber)
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.UnlinkFigurine(playerBoard)
    local figurine = playerBoard.figurine
    if not figurine then
        return
    end

    Log.Debugf("Unlinking figurine %s (%s) from player %d", figurine.getName(), figurine.getGUID(), playerBoard.playerNumber)
    figurine.setName("Unnamed Survivor")
    figurine.setColorTint({ r = 0, g = 0, b = 0 })
    playerBoard.figurine = nil
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.HealAndReset(playerBoard)
    Log.Debugf("Healing and resetting %s", playerBoard.object.getName())

    -- Clear injuries
    for _, hitLocation in ipairs(PlayerBoard.LIGHT_INJURY_LOCATIONS) do
        local field = hitLocation.."LightInjury"
        if playerBoard[field] then
            playerBoard[field] = false
            playerBoard[hitLocation.."LightInjuryCheckBox"]:Set(false)
        end
    end
    for _, hitLocation in ipairs(PlayerBoard.HEAVY_INJURY_LOCATIONS) do
        local field = hitLocation.."HeavyInjury"
        if playerBoard[field] then
            playerBoard[field] = false
            playerBoard[hitLocation.."HeavyInjuryCheckBox"]:Set(false)
        end
    end

    -- Reset armor
    for _, hitLocation in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
        local field = hitLocation.."TemporaryArmor"
        if playerBoard[field] != 0 then
            playerBoard[field] = 0
            playerBoard[hitLocation.."ArmorCounter"]:Set(playerBoard[hitLocation.."GearArmor"])
        end
    end

    -- Clear temp tokens
    for obj, _ in pairs(playerBoard.linkedTemporaryTokens) do
        if obj != nil then
            obj.destruct()
        end
    end
    playerBoard.linkedTemporaryTokens = {}

    -- Clear bleeding and lunacy tokens
    for obj, _ in pairs(playerBoard.linkedMiscTokens) do
        if obj != nil then
            obj.destruct()
        end
    end
    playerBoard.linkedMiscTokens = {}

    -- Reset survivor sheet
    if playerBoard.linkedSurvivorSheet then
        playerBoard.linkedSurvivorSheet:Survivor():HealAndReset()
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.TakeNextLocation(playerPrefix, gmNotes, availableLocations)
    if gmNotes == "Disorders" then
        for i = 1, 3 do
            local key = Location.Get(playerPrefix.." Disorder "..i)
            if availableLocations[key] then
                availableLocations[key] = nil
                return key
            end
        end

    elseif gmNotes == "Fighting Arts" or gmNotes == "Secret Fighting Arts" then
        for i = 1, 3 do
            local key = Location.Get(playerPrefix.." Fighting Art "..i)
            if availableLocations[key] then
                availableLocations[key] = nil
                return key
            end
        end

    elseif gmNotes == "Weapon Proficiencies" then
        local key = Location.Get(playerPrefix.." Weapon Proficiency")
        if availableLocations[key] then
            availableLocations[key] = nil
            return key
        end
    end

    for i = 1, 9 do
        local key = Location.Get(playerPrefix.." Ability/Impairment "..i)
        if availableLocations[key] then
            availableLocations[key] = nil
            return key
        end
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.PackSurvivorBox(playerBoard)
    local survivorSheet = playerBoard.linkedSurvivorSheet
    if survivorSheet == nil then
        Log.Debugf("No survivor linked with player board %d", playerBoard:Number())
        return
    end

    local survivor = survivorSheet:Survivor()

    Log.Debugf("Packing survivor %d on player board %d", survivor:Id(), playerBoard:Number())

    playerBoard:UnlinkSurvivorSheet()

    local objectsToPack = {}

    -- Add cards
    local playerBoardObject = playerBoard:Object()
    local hits = Location.Get("Player "..playerBoard:Number().." Cards"):BoxCast()
    local objectsToPack = {}
    for _, hit in ipairs(hits) do
        local hitObj = hit.hit_object
        if hitObj.interactable then
            if hitObj.tag == "Card" and Survivor.CARD_TYPES_MAP[hitObj.getGMNotes()] then
                Log.Debugf("Adding object %s/%s to pack list", hitObj.getName(), hitObj.getGMNotes())
                table.insert(objectsToPack, {
                    object = hitObj,
                    position = playerBoardObject.positionToLocal(hitObj.getPosition()),
                })
            else
                Log.Errorf("Didn't pack '%s': packing only takes %s", hitObj.getName(), Survivor.CARD_TYPES_STR)
                Util.Highlight(hitObj)
            end
        end
    end

    -- Add figurine
    if playerBoard.figurine then
        Log.Debugf("Adding player figurine %s to pack list", playerBoard.figurine.getGUID())
        table.insert(objectsToPack, { object = playerBoard.figurine })
        playerBoard:UnlinkFigurine() -- putting it into a bag should take care of this, but just in case
    end

    Population.DestroySurvivorSheetAndCreatePackedSurvivorBox(survivorSheet, objectsToPack, "Survivor Status "..playerBoard:Number())
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.UnpackSurvivorBox(playerBoard, survivorBox)
    local survivor = survivorBox:Survivor()

    local playerPrefix = "Player "..playerBoard:Number()

    local survivorBoxContainer, packedObjectPositions = Container(survivorBox:Object()), survivor:PackedObjectPositions()

    Log.Debugf("Unpacking SurvivorBox %s for survivor '%s' (%d)", survivorBoxContainer:Guid(), survivor:Name(), survivor:Id())

    local playerBoardObject = playerBoard:Object()

    local availableLocations = {}
    for i = 1, 3 do availableLocations[Location.Get(playerPrefix.." Disorder "..i)] = true end
    for i = 1, 3 do availableLocations[Location.Get(playerPrefix.." Fighting Art "..i)] = true end
    availableLocations[Location.Get(playerPrefix.." Weapon Proficiency")] = true
    for i = 1, 9 do availableLocations[Location.Get(playerPrefix.." Ability/Impairment "..i)] = true end

    local anyBlockingObjects = false
    for location, _ in pairs(availableLocations) do
        local blockingObjects = Zone.Objects(location)
        if #blockingObjects > 0 then
            Log.Printf("Please move clear the cards area before unpacking the survivor.")
            Util.Highlight(blockingObjects[1])
            anyBlockingObjects = true
        end
    end
    if anyBlockingObjects then
        return false
    end

    for _, entry in ipairs(survivorBoxContainer:Objects()) do
        if entry.gm_notes == "Player Figurine" then
            Log.Debugf("Unpacking figurine %s to player marker", entry.guid)
            local figurine = survivorBoxContainer:Take({
                guid = entry.guid,
                location = playerPrefix.." Marker",
            })
            playerBoard:LinkFigurine(figurine)

        else
            local positions = packedObjectPositions[entry.name]
            if positions and #positions >= 1 then
                local position = playerBoardObject.positionToWorld(positions[#positions].position)
                Log.Debugf("Taking %s to %s", entry.name, position)
                survivorBoxContainer:Take({
                    guid     = entry.guid,
                    position = position,
                    rotation = positions[#positions].rotation
                })
                table.remove(positions)

                for _, location in ipairs(Zone.LocationsAtPosition(position)) do
                    Log.Debugf("Card %s (%s) now occupies location %s", entry.name, entry.guid, location:Name())
                    availableLocations[location] = false
                end
            end
        end
    end

    local extraObjects = false
    local objectsWithoutPositions = survivorBoxContainer:Objects()
    if #objectsWithoutPositions > 0 then
        Log.Debugf("%s objects without positions", #objectsWithoutPositions)

        local height = DEFAULT_SPAWN_HEIGHT + 0.5
        for _, entry in ipairs(objectsWithoutPositions) do
            local location = PlayerBoard.TakeNextLocation(playerPrefix, entry.gm_notes, availableLocations)
            if not location then
                Log.Errorf("Couldn't place %s; no more space!", entry.name)
                location = playerPrefix.." Survivor Sheet"
                extraObjects = true
            end

            Log.Debugf("Taking %s (%s) to %s", entry.name, entry.guid, location)
            survivorBoxContainer:Take({
                guid     = entry.guid,
                location = location,
                height = height,
            })
            height = height + 0.5
        end
    end

    if extraObjects then
        Log.Errorf("Some items couldn't be placed automatically and have been placed on your survivor sheet.")
    end

    Population.ReplaceSurvivorBoxWithSheet(survivorBox, playerBoard)

    return true
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.LinkSurvivorSheet(playerBoard, survivorSheet)
    assert(CheckTagged(survivorSheet, "Survivor Sheet"))
    assert(Check(not playerBoard:SurvivorSheet(), "PlayerBoard %d is already linked to SurvivorSheet", playerBoard:Number()))

    Log.Debugf("Linking SurvivorSheet %s (Survivor %d) to player board %d", survivorSheet:Object().getGUID(), survivorSheet:Survivor():Id(), playerBoard:Number())
    playerBoard.linkedSurvivorSheet = survivorSheet
    if playerBoard.figurine then
        local name = survivorSheet:Survivor():NameOrUnnamed()
        Log.Debugf("Setting linked figurine %s name to %s", playerBoard.figurine.getGUID(), name)
        playerBoard.figurine.setName(name)
    end

    PlayerBoard.UpdateSurvivorCards(playerBoard)
    PlayerBoard.UpdateSurvivorModifiers(playerBoard)

    EventManager.FireEvent("onPlayerBoardLinkSurvivor", playerBoard, survivorSheet:Survivor())
end

---------------------------------------------------------------------------------------------------

function PlayerBoardClass.UnlinkSurvivorSheet(playerBoard)
    local survivorSheet, survivor = playerBoard:SurvivorSheet(), playerBoard:Survivor()
    Log.Debugf("Unlinking SurvivorSheet %s (Survivor %d) with PlayerBoard %d", survivorSheet:Object().getGUID(), survivor:Id(), playerBoard:Number())
    survivor:SetModifiers({}, {})
    playerBoard.linkedSurvivorSheet = nil
    EventManager.FireEvent("onPlayerBoardUnlinkSurvivor", playerBoard, survivor)
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.UpdateSurvivorTemporaryModifier(playerBoard, stat)
    if playerBoard.linkedSurvivorSheet == nil then
        return
    end

    local total = 0
    for _, token in pairs(playerBoard.linkedTemporaryTokens) do
        if token.stat == stat then
            total = total + token.value
        end
    end

    playerBoard.linkedSurvivorSheet:Survivor():SetTemporaryModifier(stat, total)
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.UpdateSurvivorPermanentModifier(playerBoard, stat)
    if playerBoard.linkedSurvivorSheet == nil then
        return
    end

    local total = 0
    for _, token in pairs(playerBoard.linkedPermanentTokens) do
        if token.stat == stat then
            total = total + token.value
        end
    end

    playerBoard.linkedSurvivorSheet:Survivor():SetPermanentModifier(stat, total)
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.UpdateSurvivorModifiers(playerBoard)
    local survivorSheet = playerBoard.linkedSurvivorSheet
    if survivorSheet == nil then
        return
    end

    Log.Debugf("Updating all Survivor modifiers for %s, survivor %d", playerBoard.object.getName(), survivorSheet:Survivor():Id())

    local tempMods = {}
    for _, token in pairs(playerBoard.linkedTemporaryTokens) do
        tempMods[token.stat] = (tempMods[token.stat] or 0) + token.value
    end

    local permMods = {}
    for _, token in pairs(playerBoard.linkedPermanentTokens) do
        permMods[token.stat] = (permMods[token.stat] or 0) + token.value
    end

    survivorSheet:Survivor():SetModifiers(tempMods, permMods)
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.ForFigurine(figurine)
    for _, playerBoard in ipairs(PlayerBoard.playerBoards) do
        if playerBoard.figurine == figurine then
            return playerBoard
        end
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectEnterContainer(container, object)
    local playerBoard = PlayerBoard.ForFigurine(object)
    if playerBoard then
        playerBoard:UnlinkFigurine(object)
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectDestroy(object)
    for _, playerBoard in ipairs(PlayerBoard.playerBoards) do
        local survivorSheet = playerBoard:SurvivorSheet()
        if survivorSheet and survivorSheet:Object() == object then
            playerBoard:UnlinkSurvivorSheet()
            break
        end
    end

    local playerBoard = PlayerBoard.ForFigurine(object)
    if playerBoard then
        playerBoard:UnlinkFigurine(object)
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectDroppedOnMarker(playerBoard, object)
    if object.getGMNotes() == "Player Figurine" then
        playerBoard:LinkFigurine(object)
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.TokenValue(token)
    local value = 1
    rot = token.getRotation()
    if rot.z >= 15 and rot.z <= 345    then
            value = -1
    end

    local qty = token.getQuantity()
    if qty >= 2 then
        value = value * qty
    end

    return value
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectDroppedOnSurvivorSheet(playerBoard, object)
    if object.getGMNotes() != "Survivor Box" then
        return
    end

    local survivorBox = Population.SurvivorBoxForObject(object)
    if not survivorBox then
        return Log.Errorf("Survivor box %s isn't linked to any survivor. This usually means it was created by copying/pasting or importing from another save. If this is the case, then you'll need to create the survivor and sheet from the 'Population' screen.", object.getGUID())
    end

    if playerBoard.linkedSurvivorSheet then
        return Log.Broadcastf("Player %d is already linked to a survivor. Click the 'Pack Survivor' button to unlink, then try dropping the survivor box again.", playerBoard:Number())
    end

    playerBoard:UnpackSurvivorBox(survivorBox)
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectDroppedOnGear(playerBoard, location, object)
    local name = object.GetName()

    if object.tag == "Card" then
        local armorStats = Armor.Get(object.getName())
        if armorStats and not playerBoard.linkedArmor[object] then
            Log.Debugf("Linking armor %s (%s) to %s with armor {%d, %d, %d, %d, %d}", object.getName(), object.getGUID(), playerBoard.object.getName(), armorStats.head, armorStats.arms, armorStats.body, armorStats.waist, armorStats.legs)
            playerBoard.linkedArmor[object] = armorStats
            for _, hitLocation in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
                playerBoard:AddArmor(hitLocation, 0, armorStats[hitLocation])
            end
            -- unlike weapons, we actually have no need to track armor in the gear grid
        end

        local weaponStats = Weapon.Get(object.getName())
        if weaponStats and not playerBoard.linkedWeapons[object] then
            Log.Debugf("Linking weapon %s (%s) to %s on gear grid %s", object.getName(), object.getGUID(), playerBoard.object.getName(), location:Name())
            playerBoard.linkedGearObjectsByLocation[location].weapon = object
            playerBoard.linkedWeapons[object] = { stats = weaponStats, location = location }
            EventManager.FireEvent("onPlayerBoardLinkWeapon", playerBoard, object)
        end
    else
        local stat = PlayerBoard.TOKEN_STATS[name]
        if stat then
            Log.Debugf("Linking gear token %s (%s) to %s at gear grid %s", name, object.getGUID(), playerBoard.object.getName(), location:Name())
            playerBoard.linkedGearTokenLocations[object] = location
            local gearObjects = playerBoard.linkedGearObjectsByLocation[location]
            gearObjects.tokens[object] = { stat = stat, value = PlayerBoard.TokenValue(object) }
            if gearObjects.weapon then
                EventManager.FireEvent("onPlayerBoardUpdateWeapon", playerBoard, gearObjects.weapon)
            end
            object.registerCollisions() -- hack to track flips
        end
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectPickedUpFromGear(playerBoard, location, object)
    local armorStats = playerBoard.linkedArmor[object]
    if armorStats then
        Log.Debugf("Unlinking armor %s (%s) from %s with armor {%d, %d, %d, %d, %d}", object.getName(), object.getGUID(), playerBoard.object.getName(), armorStats.head, armorStats.arms, armorStats.body, armorStats.waist, armorStats.legs)
        playerBoard.linkedArmor[object] = nil
        for _, location in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
            playerBoard:AddArmor(location, 0, -armorStats[location])
        end
    end

    local weaponData = playerBoard.linkedWeapons[object]
    if weaponData then
        Log.Debugf("Unlinking weapon %s (%s) from %s at gear grid %s", object.getName(), object.getGUID(), playerBoard.object.getName(), weaponData.location:Name())
        playerBoard.linkedGearObjectsByLocation[weaponData.location].weapon = nil
        playerBoard.linkedWeapons[object] = nil
        EventManager.FireEvent("onPlayerBoardUnlinkWeapon", playerBoard, object)
    end

    local location = playerBoard.linkedGearTokenLocations[object]
    if location then
        Log.Debugf("Unlinking gear token %s (%s) from %s at gear grid %s", object.getName(), object.getGUID(), playerBoard.object.getName(), location:Name())
        playerBoard.linkedGearTokenLocations[object] = nil
        local gearObjects = playerBoard.linkedGearObjectsByLocation[location]
        gearObjects.tokens[object] = nil
        if gearObjects.weapon then
            EventManager.FireEvent("onPlayerBoardUpdateWeapon", playerBoard, gearObjects.weapon)
        end
        object.unregisterCollisions()   -- hack to turn off flip tracking
        return
    end
 end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectDroppedOnArmorSet(playerBoard, object)
    local name = object.GetName()

    if object.tag == "Card" then
        local armorStats = Armor.Get(object.getName())
        if armorStats and not playerBoard.linkedArmor[object] then
            Log.Debugf("Linking armor %s (%s) to %s with armor {%d, %d, %d, %d, %d}", object.getName(), object.getGUID(), playerBoard.object.getName(), armorStats.head, armorStats.arms, armorStats.body, armorStats.waist, armorStats.legs)
            playerBoard.linkedArmor[object] = armorStats
            for _, hitLocation in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
                playerBoard:AddArmor(hitLocation, 0, armorStats[hitLocation])
            end
        end
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectPickedUpFromArmorSet(playerBoard, object)
    local armorStats = playerBoard.linkedArmor[object]
    if armorStats then
        Log.Debugf("Unlinking armor %s (%s) from %s with armor {%d, %d, %d, %d, %d}", object.getName(), object.getGUID(), playerBoard.object.getName(), armorStats.head, armorStats.arms, armorStats.body, armorStats.waist, armorStats.legs)
        playerBoard.linkedArmor[object] = nil
        for _, location in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
            playerBoard:AddArmor(location, 0, -armorStats[location])
        end
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.UpdateSurvivorCards(playerBoard)
    local cards = {}
    for _, type in ipairs(Survivor.CARD_TYPES) do
        cards[type] = {}
    end

    local n = playerBoard:Number()
    for _, object in ipairs(Zone.Objects("Player "..n.." Cards")) do
        local type = object.getGMNotes()
        if Survivor.CARD_TYPES_MAP[type] then
            table.insert(cards[type], object.getName())
        end
    end

    local survivor = playerBoard:SurvivorSheet():Survivor()
    --Log.Debugf("Updating survivor %d on player board %d cards to %s", survivor:Id(), playerBoard:Number(), cards)
    survivor:SetCards(cards)
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectDroppedOnCards(playerBoard, object)
    local name = object.GetName()

    if object.tag != "Card" then
        return
    end

    local armorStats = Armor.Get(object.getName())
    if armorStats and not playerBoard.linkedArmor[object] then
        Log.Debugf("Linking armor %s (%s) to %s with armor {%d, %d, %d, %d, %d}", object.getName(), object.getGUID(), playerBoard.object.getName(), armorStats.head, armorStats.arms, armorStats.body, armorStats.waist, armorStats.legs)
        playerBoard.linkedArmor[object] = armorStats
        for _, hitLocation in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
            playerBoard:AddArmor(hitLocation, 0, armorStats[hitLocation])
        end
        -- seems weird, but we actually have no need to track armor in the gear grid
    end

    if playerBoard.linkedSurvivorSheet then
        Log.Debugf("Card %s dropped on PlayerBoard %d, updating cards", object.getName(), playerBoard:Number())
        PlayerBoard.UpdateSurvivorCards(playerBoard)
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectPickedUpFromCards(playerBoard, object)
    local armorStats = playerBoard.linkedArmor[object]
    if armorStats then
        Log.Debugf("Unlinking armor %s (%s) from %s with armor {%d, %d, %d, %d, %d}", object.getName(), object.getGUID(), playerBoard.object.getName(), armorStats.head, armorStats.arms, armorStats.body, armorStats.waist, armorStats.legs)
        playerBoard.linkedArmor[object] = nil
        for _, location in ipairs(PlayerBoard.ARMOR_LOCATIONS) do
            playerBoard:AddArmor(location, 0, -armorStats[location])
        end
    end

    if playerBoard.linkedSurvivorSheet then
        Log.Debugf("Card %s picked up from PlayerBoard %d, updating cards", object.getName(), playerBoard:Number())
        PlayerBoard.UpdateSurvivorCards(playerBoard)
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectDroppedOnTemporaryTokens(playerBoard, object)
    local name = object.GetName()

    local stat = PlayerBoard.TOKEN_STATS[name]
    if stat then
        Log.Debugf("Linking temporary token %s (%s) to %s", name, object.getGUID(), playerBoard.object.getName())
        playerBoard.linkedTemporaryTokens[object] = { stat = stat, value = PlayerBoard.TokenValue(object) }
        PlayerBoard.UpdateSurvivorTemporaryModifier(playerBoard, stat)
        object.registerCollisions() -- hack to track flips
    end

    if name == "Bleeding Token" or name == "Lunacy Token" then
        Log.Debugf("Linking misc token %s (%s) to %s", name, object.getGUID(), playerBoard.object.getName())
        playerBoard.linkedMiscTokens[object] = object
        return
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectPickedUpFromTemporaryTokens(playerBoard, object)
    local token = playerBoard.linkedTemporaryTokens[object]
    if token then
        Log.Debugf("Unlinking temporary token %s (%s) from %s", object.getName(), object.getGUID(), playerBoard.object.getName())
        playerBoard.linkedTemporaryTokens[object] = nil
        PlayerBoard.UpdateSurvivorTemporaryModifier(playerBoard, token.stat)
        object.unregisterCollisions()   -- hack to turn off flip tracking
        return
    end

    local token = playerBoard.linkedMiscTokens[object]
    if token != nil then
        Log.Debugf("Unlinking misc token %s (%s) from %s", object.getName(), object.getGUID(), playerBoard.object.getName())
        playerBoard.linkedMiscTokens[object] = nil
        return
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectDroppedOnPermanentTokens(playerBoard, object)
    local name = object.GetName()
    local stat = PlayerBoard.TOKEN_STATS[name]
    if stat then
        Log.Debugf("Linking permanent token %s (%s) to %s", name, object.getGUID(), playerBoard.object.getName())
        playerBoard.linkedPermanentTokens[object] = { stat = stat, value = PlayerBoard.TokenValue(object) }
        PlayerBoard.UpdateSurvivorPermanentModifier(playerBoard, stat)
        object.registerCollisions() -- hack to track flips
        return
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectPickedUpFromPermanentTokens(playerBoard, object)
    local token = playerBoard.linkedPermanentTokens[object]
    if token then
        Log.Debugf("Unlinking permanent token %s (%s) from %s", object.getName(), object.getGUID(), playerBoard.object.getName())
        playerBoard.linkedPermanentTokens[object] = nil
        PlayerBoard.UpdateSurvivorPermanentModifier(playerBoard, token.stat)
        object.unregisterCollisions()   -- hack to turn off flip tracking
        return
    end
 end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnObjectCollisionEnter(object, collisionInfo)
    -- This is a hack to detect flipped tokens
    -- There's no onFlip event, and flipping doesn't trigger onPickUp, so we rely on this to detect flips
    -- of *already registered* tokens.

    local collisionObject = collisionInfo.collision_object

    local playerBoard = PlayerBoard.playerBoardsByObject[collisionObject]
    if playerBoard == nil then
        return
    end

    local location = playerBoard.linkedGearTokenLocations[object]
    if location then
        Log.Debugf("%s (%s) collided with %s", object.getName(), object.getGUID(), location:Name())

        local gearObjects = playerBoard.linkedGearObjectsByLocation[location]
        local token = gearObjects.tokens[object]
        assert(token, "Token %s (%s) was linked to %s, but was not in gear objects", object.getName(), object.getGUID(), location:Name())

        local oldValue = token.value
        local newValue = PlayerBoard.TokenValue(object)
        if newValue != oldValue then
            Log.Debugf("Token %s (%s) flipped on %s (%s)", object.getName(), object.getGUID(), collisionObject.getName(), collisionObject.getGUID())
            token.value = newValue
            if gearObjects.weapon then
                EventManager.FireEvent("onPlayerBoardUpdateWeapon", playerBoard, gearObjects.weapon)
            end
        end
    end

    local token = playerBoard.linkedTemporaryTokens[object]
    if token then
        local oldValue = token.value
        local newValue = PlayerBoard.TokenValue(object)
        if newValue != oldValue then
            Log.Debugf("Token %s (%s) flipped on %s (%s)", object.getName(), object.getGUID(), collisionObject.getName(), collisionObject.getGUID())
            token.value = newValue
            PlayerBoard.UpdateSurvivorTemporaryModifier(playerBoard, token.stat)
        end
    end

    local token = playerBoard.linkedPermanentTokens[object]
    if token then
        local oldValue = token.value
        local newValue = PlayerBoard.TokenValue(object)
        if newValue != oldValue then
            Log.Debugf("Token %s (%s) flipped on %s (%s)", object.getName(), object.getGUID(), collisionObject.getName(), collisionObject.getGUID())
            token.value = newValue
            PlayerBoard.UpdateSurvivorPermanentModifier(playerBoard, token.stat)
        end
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.OnSurvivorChangeStat(survivor, stat, value)
    if stat == "Name" then
        for _, playerBoard in ipairs(PlayerBoard.playerBoards) do
            if playerBoard:Survivor() == survivor and playerBoard:Figurine() then
                Log.Debugf("Updating linked figurine %s for player %s to %s", playerBoard:Figurine().getGUID(), playerBoard:Number(), value)
                playerBoard:Figurine().setName(value)
            end
        end
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.Init(modules, saveState, expansions)
    Armor = modules.Armor
    Weapon = modules.Weapon
    Population = modules.Population

    saveState = saveState or {}
    for playerNumber = 1, 4 do
        local playerPrefix = "Player "..playerNumber
        local playerBoardObj = NamedObject.Get(playerPrefix.." Board")
        local playerBoard = PlayerBoard.Create(playerNumber, playerBoardObj, saveState[playerNumber])
        PlayerBoard.playerBoardsByObject[playerBoardObj] = playerBoard
        PlayerBoard.playerBoards[playerNumber] = playerBoard
    end
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.PostInit()
    for playerNumber = 1, 4 do
        local playerPrefix = "Player "..playerNumber
        local playerBoard = PlayerBoard.playerBoards[playerNumber]

        for i = 1, 9 do
            local location =
            Zone.AddHandler({
                location = playerPrefix.." Gear "..i,
                dropHandler = function(object, location) PlayerBoard.OnObjectDroppedOnGear(playerBoard, location, object) end,
                pickUpHandler = function(object, location) PlayerBoard.OnObjectPickedUpFromGear(playerBoard, location, object) end,

            })
        end
        Zone.AddHandler({
            location = playerPrefix.." Fist & Tooth",
            dropHandler = function(object, location) PlayerBoard.OnObjectDroppedOnGear(playerBoard, location, object) end,
            pickUpHandler = function(object, location) PlayerBoard.OnObjectPickedUpFromGear(playerBoard, location, object) end,
        })

        Zone.AddHandler({
            location = playerPrefix.." Armor Set",
            dropHandler = function(object) PlayerBoard.OnObjectDroppedOnArmorSet(playerBoard, object) end,
            pickUpHandler = function(object) PlayerBoard.OnObjectPickedUpFromArmorSet(playerBoard, object) end,
        })

        for _, location in ipairs({
            playerPrefix.." Disorder 1",
            playerPrefix.." Disorder 2",
            playerPrefix.." Disorder 3",
            playerPrefix.." Fighting Art 1",
            playerPrefix.." Fighting Art 2",
            playerPrefix.." Fighting Art 3",
            playerPrefix.." Weapon Proficiency",
            playerPrefix.." Ability/Impairment 1",
            playerPrefix.." Ability/Impairment 2",
            playerPrefix.." Ability/Impairment 3",
            playerPrefix.." Ability/Impairment 4",
            playerPrefix.." Ability/Impairment 5",
            playerPrefix.." Ability/Impairment 6",
            playerPrefix.." Ability/Impairment 7",
            playerPrefix.." Ability/Impairment 8",
            playerPrefix.." Ability/Impairment 9",
        }) do
            Zone.AddHandler({
                location = location,
                dropHandler = function(object) PlayerBoard.OnObjectDroppedOnCards(playerBoard, object) end,
                pickUpHandler = function(object) PlayerBoard.OnObjectPickedUpFromCards(playerBoard, object) end,
            })
        end

        -- Zone add order matters since each zone will fire for initial objects in the order they're added
        -- Intentionally add the "Survivor Sheet" zone last
        Zone.AddHandler({
            location = playerPrefix.." Marker",
            dropHandler = function(object) PlayerBoard.OnObjectDroppedOnMarker(playerBoard, object) end,
        })

        Zone.AddHandler({
            location = playerPrefix.." Survivor Sheet",
            dropHandler = function(object) PlayerBoard.OnObjectDroppedOnSurvivorSheet(playerBoard, object) end,
        })

        Zone.AddHandler({
            location = playerPrefix.." Temporary Tokens",
            dropHandler = function(object) PlayerBoard.OnObjectDroppedOnTemporaryTokens(playerBoard, object) end,
            pickUpHandler = function(object) PlayerBoard.OnObjectPickedUpFromTemporaryTokens(playerBoard, object) end,
        })

        Zone.AddHandler({
            location = playerPrefix.." Permanent Tokens",
            dropHandler = function(object) PlayerBoard.OnObjectDroppedOnPermanentTokens(playerBoard, object) end,
            pickUpHandler = function(object) PlayerBoard.OnObjectPickedUpFromPermanentTokens(playerBoard, object) end,
        })
    end

    EventManager.AddHandler("onObjectCollisionEnter", PlayerBoard.OnObjectCollisionEnter)
    EventManager.AddHandler("onObjectEnterContainer", PlayerBoard.OnObjectEnterContainer)
    EventManager.AddHandler("onObjectDestroy", PlayerBoard.OnObjectDestroy)
    EventManager.AddHandler("onSurvivorStatChange", PlayerBoard.OnSurvivorChangeStat)
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.Save()
    local saveState = {}
    for i, playerBoard in ipairs(PlayerBoard.playerBoards) do
        saveState[i] = playerBoard:Save()
    end
    return saveState
end

---------------------------------------------------------------------------------------------------

function PlayerBoard.ForPlayer(playerNumber)
    assert(CheckNum(playerNumber))
    return PlayerBoard.playerBoards[playerNumber]
end

---------------------------------------------------------------------------------------------------

return {
    Init = PlayerBoard.Init,
    PostInit = PlayerBoard.PostInit,
    Save = PlayerBoard.Save,
    ForPlayer = PlayerBoard.ForPlayer,
    ForFigurine = PlayerBoard.ForFigurine,
}
