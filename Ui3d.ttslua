require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("Ui3d")
local Util = require("Kdm/Util")

local UI_SCALE = 0.15
local UI_Y = 0.103  -- works for 0.1-thick tiles

local UI_LIGHT_BROWN = { r = 0.733, g = 0.706, b = 0.631, a = 100 }
local UI_DARK_BROWN = { r = 0.271, g = 0.22, b = 0.141, a = 100 }
local UI_BACKGROUND_COLOR = { r = 1, g = 1, b = 1, a = 0 }
--local UI_BACKGROUND_COLOR = { r = 1.0, g = 0.0, b = 0.5, a = 0.9 }
local UI_HOVER_COLOR = { r = 1.0, g = 1.0, b = 1.0, a = 0.5 }
local UI_PRESS_COLOR = { r = 1.0, g = 1.0, b = 1.0, a = 0.7 }

local Ui_objectButtons = {}
local Ui_objectInputs = {}

function Ui3d_Dud() end

---------------------------------------------------------------------------------------------------

local function Ui_RecordButtonAndGetIndex(object)
    if not Ui_objectButtons[object] then
        Ui_objectButtons[object] = {}
    end
    table.insert(Ui_objectButtons[object], object)
    return #Ui_objectButtons[object] - 1
end

---------------------------------------------------------------------------------------------------

local function Ui_RecordInputAndGetIndex(object)
    if not Ui_objectInputs[object] then
        Ui_objectInputs[object] = {}
    end
    table.insert(Ui_objectInputs[object], object)
    return #Ui_objectInputs[object] - 1
end

---------------------------------------------------------------------------------------------------

local Ui_TextClass = {
    SetText = function(text, textValue)
        Log.Debugf("Setting %s text to %s", text.id, testValue)
        text.params.label = textValue
        text.object.editButton(text.params)
    end
}
Ui_TextClass.__index = Ui_TextClass

-- really just a button
local function Ui_Text(params)
    local object, id, topLeft, bottomRight = params.object, params.id, params.topLeft, params.bottomRight
    assert(CheckObject(object))
    assert(CheckStr(id))
    assert(CheckVec2(topLeft))
    assert(CheckVec2(bottomRight))

    local text = {
        tag = "Text",
        object = object,
        id = object.getGUID().."_"..params.id.."_Text",
    }
    setmetatable(text, Ui_TextClass)

    Log.Debugf("Creating text %s", text.id)

    local index = Ui_RecordButtonAndGetIndex(object)
    local tl = topLeft
    local br = bottomRight
    local x = -(tl.x + br.x) / 2
    local y = (tl.y + br.y) / 2
    local scale = params.scale or UI_SCALE

    text.params = {
        index = index,
        position = { x = x, y = params.y or UI_Y, z = y },
        scale = { x = scale, y = scale, z = scale },
        width = 0,
        height = 0,
        --color = UI_BACKGROUND_COLOR,
        label = params.text,
        font_color = params.textColor,
        font_size = 1000,
        click_function = "Ui3d_Dud",
        function_owner = self,
    }
    object.createButton(text.params)

    return text
end

---------------------------------------------------------------------------------------------------

local function Ui_Button(params)
    local object, id, topLeft, bottomRight, onClick = params.object, params.id, params.topLeft, params.bottomRight, params.onClick
    assert(CheckObject(object))
    assert(CheckStr(id))
    assert(CheckVec2(topLeft))
    assert(CheckVec2(bottomRight))
    assert(CheckFunc(onClick))
    local button = {
        tag = "Button",
        object = object,
        id = object.getGUID().."_"..params.id.."_Button",
    }

    Log.Debugf("Creating button %s", button.id)

    local index = Ui_RecordButtonAndGetIndex(object)
    local tl = topLeft
    local br = bottomRight
    local x = -(tl.x + br.x) / 2
    local y = (tl.y + br.y) / 2
    local scale = params.scale or UI_SCALE
    local sizeFactor = 500 / scale
    local width = math.abs(br.x - tl.x) * sizeFactor
    local height = math.abs(br.y - tl.y) * sizeFactor
    local clickFunctionName = button.id.."_OnClick"
    self.setVar(clickFunctionName, params.onClick)
    button.params = {
        index = index,
        position = { x = x, y = params.y or UI_Y, z = y },
        scale = { x = scale, y = scale, z = scale },
        width = width,
        height = height,
        color = params.color or UI_BACKGROUND_COLOR,
        hover_color = params.hover_color or UI_HOVER_COLOR,
        press_color = params.press_color or UI_PRESS_COLOR,
        click_function = clickFunctionName,
        function_owner = self,
    }
    object.createButton(button.params)

    return button
end

---------------------------------------------------------------------------------------------------

local Ui_InputClass = {
    Set = function(input, value)
        Log.Debugf("Setting %s to %s", input.id, value)
        input.params.value = value
        input.object.editInput(input.params)
    end,
}
Ui_InputClass.__index = Ui_InputClass

function Ui_Input(params)
    local object, id, topLeft, bottomRight, value, onValueChanged = params.object, params.id, params.topLeft, params.bottomRight, params.value, params.onValueChanged
    assert(CheckObject(object))
    assert(CheckStr(id))
    assert(CheckVec2(topLeft))
    assert(CheckVec2(bottomRight))
    assert(CheckStrOrNil(value))
    assert(CheckFunc(onValueChanged))

    local id = object.getGUID().."_"..id.."Input"
    Log.Debugf("Creating Input %s", id)

    local id = id.."Input"
    local input = {
        id = id,
        object = object,
        onValueChanged = onValueChanged,
    }
    setmetatable(input, Ui_InputClass)

    local index = Ui_RecordInputAndGetIndex(object)
    local tl = topLeft
    local br = bottomRight
    local x = -(tl.x + br.x) / 2
    local y = (tl.y + br.y) / 2
    local scale = params.scale or UI_SCALE
    local sizeFactor = 500 / scale
    local width = math.abs(br.x - tl.x) * sizeFactor
    local height = math.abs(br.y - tl.y) * sizeFactor
    local inputFunctionName = id.."_OnValueChanged"
    self.SetVar(inputFunctionName, function(_, _, value)
        input.onValueChanged(value)
    end)
    input.params = {
        index = index,
        position = { x = x, y = params.y or UI_Y, z = y },
        scale = { x = scale, y = scale, z = scale },
        width = width,
        height = height,
        label = params.label or "",
        value = value or "",
        color = UI_BACKGROUND_COLOR,
        font_color = UI_DARK_BROWN,
        font_size = 1000,
        input_function = inputFunctionName,
        function_owner = self,
    }
    object.createInput(input.params)

    return input
end

---------------------------------------------------------------------------------------------------

local Ui_CounterClass = {
    Set = function(counter, value)
        assert(CheckNum(value))
        Log.Debugf("Changing %s to %d", counter.text.id, value)
        counter.text.params.label = tostring(value)
        counter.object.editButton(counter.text.params)
    end,
}
Ui_CounterClass.__index = Ui_CounterClass

function Ui_Counter(params)
    local object, id, topLeft, bottomRight, value, onValueChanged = params.object, params.id, params.topLeft, params.bottomRight, params.value, params.onValueChanged
    assert(CheckObject(object))
    assert(CheckStr(id))
    assert(CheckVec2(topLeft))
    assert(CheckVec2(bottomRight))
    assert(CheckNum(value))
    assert(CheckFunc(onValueChanged))

    -- 2 = +/- buttons, 1 = single button with left/right mouse click for +1/-1
    local counterStyle = params.counterStyle or 2

    local id = object.getGUID().."_"..id.."Counter"
    Log.Debugf("Creating Counter %s", id)

    local textId = id.."Text"
    local minusButtonId = id.."MinusButton"
    local plusButtonId = id.."PlusButton"

    local counter = {
        object = object,
        onValueChanged = onValueChanged,
        text = { id = textId },
        minusButton = { id = minusButtonId },
        plusButton = { id = plusButtonId },
    }
    setmetatable(counter, Ui_CounterClass)

    local index = Ui_RecordButtonAndGetIndex(object)
    local tl = topLeft
    local br = bottomRight
    local x = -(tl.x + br.x) / 2
    local y = (tl.y + br.y) / 2
    local scale = params.scale or UI_SCALE
    local sizeFactor = 500 / scale
    local width = math.abs(br.x - tl.x) * sizeFactor
    local height = math.abs(br.y - tl.y) * sizeFactor
    counter.text.params = {
        index = index,
        position = { x = x, y = params.y or UI_Y, z = Util.Lerp(tl.y, br.y, 0.65) },
        scale = { x = scale, y = scale, z = scale },
        width = 0,
        height = 0,
        label = tostring(value),
        color = params.color or { r = 1, g = 1, b = 1 },
        hover_color = params.hover_color or UI_BACKGROUND_COLOR,
        press_color = params.press_color or UI_BACKGROUND_COLOR,
        font_color = params.font_color or UI_LIGHT_BROWN,
        font_size = params.font_size or 1000,
        click_function = "Ui3d_Dud",
        function_owner = self,
    }
    object.createButton(counter.text.params)

    local clickFunctionName = counter.minusButton.id.."_OnClick"

    if (counterStyle == 1) then
        self.setVar(clickFunctionName, function(_, _, altClick)
            counter.onValueChanged(altClick and -1 or 1)
        end)

        local index = Ui_RecordButtonAndGetIndex(object)
        counter.minusButton.params = {
            index = index,
            position = { x = x, y = params.y or UI_Y, z = Util.Lerp(tl.y, br.y, 0.7) },
            scale = { x = scale, y = scale, z = scale },
            width = width,
            height = height,
            color = params.color or UI_BACKGROUND_COLOR,
            hover_color = params.hover_color or UI_HOVER_COLOR,
            press_color = params.press_color or UI_PRESS_COLOR,
            click_function = clickFunctionName,
            function_owner = self,
        }
        object.createButton(counter.minusButton.params)
    else
        self.setVar(clickFunctionName, function(_, _, altClick)
            counter.onValueChanged(altClick and -10 or -1)
        end)

        local index = Ui_RecordButtonAndGetIndex(object)
        counter.minusButton.params = {
            index = index,
            position = { x = -Util.Lerp(tl.x, br.x, 0.25), y = params.y or UI_Y, z = y },
            scale = { x = scale, y = scale, z = scale },
            width = width / 2,
            height = height,
            color = params.color or UI_BACKGROUND_COLOR,
            hover_color = params.hover_color or UI_HOVER_COLOR,
            press_color = params.press_color or UI_PRESS_COLOR,
            click_function = clickFunctionName,
            function_owner = self,
        }
        object.createButton(counter.minusButton.params)

        local clickFunctionName = counter.plusButton.id.."_OnClick"
        self.setVar(clickFunctionName, function(_, _, altClick)
            counter.onValueChanged(altClick and 10 or 1)
        end)
        local index = Ui_RecordButtonAndGetIndex(object)
        counter.plusButton.params = {
            index = index,
            position = { x = -Util.Lerp(tl.x, br.x, 0.75), y = params.y or UI_Y, z = y },
            scale = { x = scale, y = scale, z = scale },
            width = width / 2,
            height = height,
            color = params.color or UI_BACKGROUND_COLOR,
            hover_color = params.hover_color or UI_HOVER_COLOR,
            press_color = params.press_color or UI_PRESS_COLOR,
            click_function = clickFunctionName,
            function_owner = self,
        }
        object.createButton(counter.plusButton.params)
    end

    return counter
end

---------------------------------------------------------------------------------------------------

local Ui_CheckBoxClass = {
    Set = function(checkBox, checked)
        Log.Debugf("Changing %s to %s", checkBox.id, tostring(checked))
        checkBox.text.params.label = checked and "\u{25a0}" or ""
        checkBox.object.editButton(checkBox.text.params)
    end,
}
Ui_CheckBoxClass.__index = Ui_CheckBoxClass

function Ui_CheckBox(params)
    local object, id, topLeft, bottomRight, onClick = params.object, params.id, params.topLeft, params.bottomRight, params.onClick
    assert(CheckObject(object))
    assert(CheckStr(id))
    assert(CheckVec2(topLeft))
    assert(CheckVec2(bottomRight))
    assert(CheckFunc(onClick))

    local id = object.getGUID().."_"..params.id.."_CheckBox"
    Log.Debugf("Creating check box %s", id)

    local checkBox = {
        tag = "CheckBox",
        object = object,
        text = {
            id = id.."_Text"
        },
        button = {
            id = id.."_Button"
        }
    }
    setmetatable(checkBox, Ui_CheckBoxClass)

    local index = Ui_RecordButtonAndGetIndex(object)
    local tl = topLeft
    local br = bottomRight
    local x = -(tl.x + br.x) / 2
    local y = (tl.y + br.y) / 2
    local scale = params.scale or UI_SCALE
    local sizeFactor = 500 / scale
    local width = math.abs(br.x - tl.x) * sizeFactor
    local height = math.abs(br.y - tl.y) * sizeFactor
    checkBox.text.params = {
        index = index,
        position = { x = x, y = params.y or UI_Y, z = Util.Lerp(tl.y, br.y, 0.42) },
        scale = { x = scale, y = scale, z = scale },
        width = 0,
        height = 0,
        label = params.checked and "\u{25A0}" or "",
        alignment = 3,  -- center
        color = UI_BACKGROUND_COLOR,
        font_size = 1000,
        font_color = UI_DARK_BROWN,
        click_function = "Ui3d_Dud",
        function_owner = self,
    }
    object.createButton(checkBox.text.params)

    local index = Ui_RecordButtonAndGetIndex(object)
    local clickFunctionName = checkBox.button.id.."_OnClick"
    self.setVar(clickFunctionName, params.onClick)
    checkBox.button.params = {
        index = index,
        position = { x = x, y = params.y or UI_Y, z = y },
        scale = { x = scale, y = scale, z = scale },
        width = width,
        height = height,
        color = UI_BACKGROUND_COLOR,
        hover_color = { 0, 0, 0, 0.8 },
        press_color = { 0, 0, 0, 0.8 },
        click_function = clickFunctionName,
        function_owner = self,
    }
    object.createButton(checkBox.button.params)

    return checkBox
end

---------------------------------------------------------------------------------------------------

return {
    Text = Ui_Text,
    Button = Ui_Button,
    Input = Ui_Input,
    Counter = Ui_Counter,
    CheckBox = Ui_CheckBox,
    DARK_BROWN = UI_DARK_BROWN
}
